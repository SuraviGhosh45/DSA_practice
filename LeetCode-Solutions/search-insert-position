Problem Link --> https://leetcode.com/problems/search-insert-position/description/

Example:
Input: nums = [1,3,5,6], target = 2
Output: 1

Explanation:
here [1,3,5,6] available and find the search position by finding the lower bound.
Lower bound means if the target value is greater than or equal to any element in the array, that is called the lower bound.
like 1 not greater than or equal to 2 (target), so 1 is not the lower bound 2, bu but 3 is nearest greater value of 2 in the array, so 
3 is the lower bound of 2. 

Solution:
We solve it by Binary search to get the answer in the O(log N) time which is mentioned in the question.

1.Initialize Pointers and Answer:
 -low = 0, high = len(nums) - 1
 -ans = len(nums) for  default insert position is at the end in case target is greater than all elements
2.Binary Search Loop:
 -While low <= high:
 -Compute mid = (low + high) // 2
 -If nums[mid] >= target then A potential insert position is found at mid, so update ans = mid
   and  Move to the left half of the array by setting high = mid - 1
 -Else Move to the right half by setting low = mid + 1
3.Return ans which holds the correct insert position, whether the target is found or not.

Time Complexity:O(log N)
Space Complexity:O(1)

Code:
class Solution(object):
    def searchInsert(self, nums, target):
        ans=len(nums)
        high=len(nums)-1
        low=0
        while low<=high:
            mid=(low+high)//2
            if nums[mid]>=target:
                ans=mid
                high=mid-1
            else:
                low=mid+1
        return ans
            


