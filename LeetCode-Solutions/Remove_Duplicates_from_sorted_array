Problem Link -> https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/

Example:
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]

Explanation: 
Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

Solution:
Here we use Two pointer approach where,
1. we Take two pointers for iterating the elements: first is i = 0 and the other is j = 1.
2.If two numbers are similar, do nothing; but if not, then place the new unique number at the next position.
3.increase the values of i and j.
4. return i+1 to get the count of unique elements.

Time complexity --> O(n)
Space Complexity --> O(1)

Code:
class Solution(object):
    def removeDuplicates(self, nums):
        i=0
        for j in range(1,len(nums)):
            if(nums[i]!=nums[j]):
                nums[i+1],nums[j]=nums[j],nums[i+1]
                i+=1  
        return i+1
                
