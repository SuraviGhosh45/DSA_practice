**LeetCode Link:** [Problem](https://leetcode.com/problems/find-the-original-typed-string-i/description/?envType=daily-question&envId=2025-07-01)

Example:
Input: 
word = "abbcccc"

Output: 5

Explanation:
The possible strings are: "abbcccc", "abbccc", "abbcc", "abbc", and "abcccc".

# Solution:
## approach
1.taking a variable count with a value of 1(because every alphabet in the word string ocuur atleast 1 time)
2.iterate in the string and check if the variable is reapeatedly occur or not
3. if yes count increased by 1
4.return count

## code

class Solution(object):
    def possibleStringCount(self, word):
        count=1 
        
        for i in range(1,len(word)):
            if word[i-1]==word[i]:
                count+=1
        return count



### Example:
**Input:** `word = "abbcccc"`  
**Output:** `5`

### Explanation:
The possible original strings are:
- "abbcccc"
- "abbccc"
- "abbcc"
- "abbc"
- "abcccc"

So, the answer is **5**.

### Approach:
1. Group the characters in the word by consecutive repetition.
2. For each group, we have `n` choices (where `n` is the group length).
3. Multiply all group lengths to get total possible original strings.
