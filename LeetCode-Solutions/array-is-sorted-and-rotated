Problem Link --> https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/

Example:
Input: nums = [3,4,5,1,2]
Output: true

Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the element of value 3: [3,4,5,1,2].

Solution:
 This function checks if the array nums is a non-decreasing sorted array rotated at most once.
 1. Count how many times an element is greater than the next (nums[i-1] > nums[i]).
 2. If the first element is less than the last, increment the count to catch invalid cases.
 3. Return True if the count is at most 1; otherwise, return False.

Time Complexity:O(n)
Space Complexity:O(1)

Code:
class Solution(object):
    def check(self, nums):
        
        count=0

        for i in range(1,len(nums)):
            if nums[i-1]>nums[i]:
                count+=1
        
        if nums[0]<nums[len(nums)-1]:
            count+=1
        
        if count<=1:
            return True
        return False
