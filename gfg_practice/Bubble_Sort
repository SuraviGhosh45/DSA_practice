Problem Link --> https://www.geeksforgeeks.org/problems/bubble-sort/0?_gl=1*jsdqgs*_up*MQ..*_gs*MQ..&gclid=CjwKCAjw7MLDBhAuEiwAIeXGIY19eg678RhKpgeSdpYzwCcYpqwFDHJrG030ZLh5himeWfQJ4gtZIxoC82AQAvD_BwE&gbraid=0AAAAAC9yBkDPoUWyHAe7pmCuwcsLlRekN

Example:
Input: arr[] = [1, 2, 3, 4, 5]
Output: [1, 2, 3, 4, 5]

Explanation: An array that is already sorted should remain unchanged after applying bubble sort.

Solution:
1.Loop from the end of the list down to the beginning (i = len(arr) - 1 to 1).
2.Compare Adjacent Elements
  For each i, compare elements from index 0 to i-1.
3.If the element at index j is greater than the one at j+1, swap them.
4.After each full pass, the largest element settles at the correct position at the end.
5.Continue until all elements are sorted and return the final array.

Time Complexity --> O(n^2)[Average and worst case]
Space Complexity -->O(1)

Code:
class Solution:
    #Function to sort the array using bubble sort algorithm.
    def bubbleSort(self,arr):
        for i in range(len(arr)-1,0,-1):
            for j in range(0,i):
                if arr[j]>arr[j+1]:
                    temp=arr[j]
                    arr[j]=arr[j+1]
                    arr[j+1]=temp
        return arr


Optimize Solution:
Optimizing this code by checking if the array is already 
sorted by seeing if swap is 0 or 1.

Time Complexity --> O(n)[Best case]
Space Complexity -->O(1)

Optimized Code:
class Solution:
    #Function to sort the array using bubble sort algorithm.
    def bubbleSort(self,arr):
        swap=0
        for i in range(len(arr)-1,0,-1):
            for j in range(0,i):
                if arr[j]>arr[j+1]:
                    temp=arr[j]
                    arr[j]=arr[j+1]
                    arr[j+1]=temp
                    swap=1
            if swap == 0:
                break
                    
        return arr
