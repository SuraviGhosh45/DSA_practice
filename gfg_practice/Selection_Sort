problem Link --> http://geeksforgeeks.org/problems/selection-sort/1?

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Explanation: Maintain sorted (in bold) and unsorted subarrays. 
Select 1. Array becomes 1 4 3 9 7. 
Select 3. Array becomes 1 3 4 9 7.
Select 4. Array becomes 1 3 4 9 7.
Select 7. Array becomes 1 3 4 7 9.
Select 9. Array becomes 1 3 4 7 9.

Solution Approach 
This solution uses the Selection Sort algorithm to sort a given list in ascending order.
1.The algorithm divides the array into two parts:
 - A sorted section at the beginning
 - An unsorted section covering the rest
2.For each index i in the array:
 - Assume the element at i is the minimum (mini = i)
 - Traverse the unsorted portion (i+1 to end) to find the true minimum
 - If a smaller element is found, update mini
 - Swap the element at i with the element at mini
3.Repeat until the entire array is sorted

Time Complexity: O(n^2)
Space Complexity: O(1)

Code:
class Solution: 
    def selectionSort(self, nums):
        for i in range(len(nums)):
            mini = i
            for j in range(i + 1, len(nums)):
                if nums[j] < nums[mini]:
                    mini = j
            nums[i], nums[mini] = nums[mini], nums[i]
        return nums
