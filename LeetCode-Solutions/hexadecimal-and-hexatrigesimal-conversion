Problem Link ---> https://leetcode.com/contest/biweekly-contest-160/problems/hexadecimal-and-hexatrigesimal-conversion/description/

Example:
Input: n = 13
Output: "A91P1"

Explanation:
n2 = 13 * 13 = 169. In hexadecimal, it converts to (10 * 16) + 9 = 169, which corresponds to "A9".
n3 = 13 * 13 * 13 = 2197. In hexatrigesimal, it converts to (1 * 362) + (25 * 36) + 1 = 2197, which corresponds to "1P1".
Concatenating both results gives "A9" + "1P1" = "A91P1"

Solution:
1.Compute powers like,
n_squared = n * n
n_cubed = n * n * n
2.Convert n_squared to hexadecimal.
3.Convert n_cubed to base-36:
4.Define a custom base36() function using division and character mapping (0-9, A-Z).
5.Combine the two string representations and Return the final result.

Time Complexity --> O(log n)
Space Complexity-->O(log n)

Code:
class Solution(object):
    @staticmethod
    def base36(n):
        chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        if n == 0:
            return "0"
        result = ""
        while n > 0:
            n, rem = divmod(n, 36)
            result = chars[rem] + result
        return result
        
    def concatHex36(self, n):
        n1=n*n
        n2=n*n*n
        res=hex(n1)[2:].upper()
        res1=Solution.base36(n2)
        return res+res1Â©leetcode
