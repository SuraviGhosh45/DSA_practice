Problem Link: [LeetCode](https://leetcode.com/problems/longest-harmonious-subsequence/?envType=daily-question&envId=2025-06-30)


Approach:
1.Use a dictionary to count the frequency of each number in the array.
2.Iterate through the dictionary keys.
3.For each key, check if key + 1 exists.
4.If it exists, sum the frequencies of key and key + 1.
5.Keep track of the maximum sum found.

Example:
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5

Explanation:
The longest harmonious subsequence is [3,2,2,2,3]

code:
class Solution(object):
    def findLHS(self, nums):
        table={}
        for i in nums:
            table[i]=table.get(i,0)+1
        max_length = 0
        for key in table:
            if key + 1 in table:
                curr_length = table[key] + table[key + 1]
                max_length = max(max_length, curr_length)
        return max_length
