Problem Link --> https://leetcode.com/problems/fibonacci-number/description/

Example:
Input: n = 4

Output: 3

Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.

Solution 1: 
This implementation uses a Recursive Fibonacci to calculate the nth Fibonacci number.
The Fibonacci sequence is defined as:
  - F(0) = 0
  - F(1) = 1
  - F(n) = F(n-1) + F(n-2) for n > 1
The function calls itself recursively to compute F(n-1) and F(n-2), then returns their sum.
Note --> [Using `@staticmethod` improves clarity, signaling that `fib` is a utility function.]

Time Complexity:O(2^n)
Space Complexity:O(n)

Code:
class Solution(object):
    @staticmethod
    def fib(n):
        if n == 0:
            return 0
        elif n == 1:
            return 1
        return Solution.fib(n - 1) + Solution.fib(n - 2)

